{"version":3,"file":"avalanche-js-crypto.cjs.development.js","sources":["../src/random.ts","../src/errors.ts","../src/bytes.ts","../src/keccak256.ts","../src/bech32.ts","../src/rlp.ts","../src/keyTool.ts","../src/keystore.ts","../src/address.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module avalanche-crypto\n */\n\n/**\n * Uses JS-native CSPRNG to generate a specified number of bytes.\n * @NOTE\n * this method throws if no PRNG is available.\n * @param {Number} bytes bytes number to generate\n * @return {String} ramdom hex string\n */\nexport const randomBytes = (bytes: number): string => {\n  let randBz: number[] | Uint8Array;\n\n  if (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) {\n    randBz = window.crypto.getRandomValues(new Uint8Array(bytes));\n  } else if (typeof require !== 'undefined') {\n    randBz = require('crypto').randomBytes(bytes);\n  } else {\n    throw new Error('Unable to generate safe random numbers.');\n  }\n\n  let randStr = '';\n  for (let i = 0; i < bytes; i += 1) {\n    randStr += `00${randBz[i].toString(16)}`.slice(-2);\n  }\n\n  return randStr;\n};\n","/**\n # avalanche-js-crypto\n\nThis package provides a collection of apis related to address management, kestore, encoding, and encrypt/decrypt.\n\n## Installation\n\n```\nnpm install avalanche-js-crypto\n```\n\n## Usage\n\n```javascript\n* const {\n*   encode,\n*   decode,\n*   randomBytes,\n*   toBech32,\n*   fromBech32,\n*   AvalancheAddress,\n*   generatePrivateKey,\n*   getPubkeyFromPrivateKey,\n*   getAddressFromPublicKey,\n*   getAddressFromPrivateKey,\n*   encryptPhrase,\n*   decryptPhrase\n* } = require('avalanche-js-crypto');\n* const { isPrivateKey, isAddress, isPublicKey } = require('avalanche-js-utils');\n```\n\nAddress apis\n```javascript\nconst bytes = randomBytes(20);\nconst addr = new AvalancheAddress(bytes);\n\nconsole.log(addr.checksum);\nconsole.log(addr.bech32);\n\nconsole.log(AvalancheAddress.isValidBech32(addr.bech32));\n```\n\nRLP apis\n```javascript\nconst encoded = '0x89010101010101010101';\nconst decoded = '0x010101010101010101';\nconsole.log(encode(decoded));\nconsole.log(decode(encoded));\n```\n\nKeystore apis\n```javascript\nconst prv = generatePrivateKey();\nconst pub = getPubkeyFromPrivateKey(prv);\nconst addr = getAddressFromPublicKey(pub);\nconst addrPrv = getAddressFromPrivateKey(prv);\nconsole.log(isPrivateKey(prv));\nconsole.log(isPublicKey(pub));\nconsole.log(isAddress(addr));\nconsole.log(isAddress(addrPrv));\n```\n\nEncrypt/decrypt apis\n```javascript\n* const { Wallet } = require('avalanche-js-account');\n\n* const myPhrase = new Wallet().newMnemonic();\n* console.log(myPhrase);\n* const pwd = '1234';\n* encryptPhrase(myPhrase, pwd).then((value) => {\n*   console.log(value);\n*   decryptPhrase(JSON.parse(value), pwd).then(value => {\n*     console.log(value);\n*   });\n* });\n```\n *\n * @packageDocumentation\n * @module avalanche-crypto\n */\n\n// This file is ported from ether.js/src.ts/errors.ts\n\n// Unknown Error\n/** @hidden */\nexport const UNKNOWN_ERROR = 'UNKNOWN_ERROR';\n\n// Not implemented\n/** @hidden */\nexport const NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';\n\n// Missing new operator to an object\n//  - name: The name of the class\n/** @hidden */\nexport const MISSING_NEW = 'MISSING_NEW';\n\n// Call exception\n//  - transaction: the transaction\n//  - address?: the contract address\n//  - args?: The arguments passed into the function\n//  - method?: The Solidity method signature\n//  - errorSignature?: The EIP848 error signature\n//  - errorArgs?: The EIP848 error parameters\n//  - reason: The reason (only for EIP848 \"Error(string)\")\n/** @hidden */\nexport const CALL_EXCEPTION = 'CALL_EXCEPTION';\n\n// Invalid argument (e.g. value is incompatible with type) to a function:\n//   - argument: The argument name that was invalid\n//   - value: The value of the argument\n/** @hidden */\nexport const INVALID_ARGUMENT = 'INVALID_ARGUMENT';\n\n// Missing argument to a function:\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\n/** @hidden */\nexport const MISSING_ARGUMENT = 'MISSING_ARGUMENT';\n\n// Too many arguments\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\n/** @hidden */\nexport const UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT';\n\n// Numeric Fault\n//   - operation: the operation being executed\n//   - fault: the reason this faulted\n/** @hidden */\nexport const NUMERIC_FAULT = 'NUMERIC_FAULT';\n\n// Insufficien funds (< value + gasLimit * gasPrice)\n//   - transaction: the transaction attempted\n/** @hidden */\nexport const INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS';\n\n// Nonce has already been used\n//   - transaction: the transaction attempted\n/** @hidden */\nexport const NONCE_EXPIRED = 'NONCE_EXPIRED';\n\n// The replacement fee for the transaction is too low\n//   - transaction: the transaction attempted\n/** @hidden */\nexport const REPLACEMENT_UNDERPRICED = 'REPLACEMENT_UNDERPRICED';\n\n// Unsupported operation\n//   - operation\n/** @hidden */\nexport const UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';\n\n// tslint:disable-next-line: variable-name\n/** @hidden */\nlet _permanentCensorErrors = false;\n// tslint:disable-next-line: variable-name\n/** @hidden */\nlet _censorErrors = false;\n\n// @TODO: Enum\n/** @hidden */\nexport function throwError(message: string, code: string | null | undefined, params: any): never {\n  if (_censorErrors) {\n    throw new Error('unknown error');\n  }\n\n  if (!code) {\n    code = UNKNOWN_ERROR;\n  }\n  if (!params) {\n    params = {};\n  }\n\n  const messageDetails: string[] = [];\n  Object.keys(params).forEach((key) => {\n    try {\n      messageDetails.push(key + '=' + JSON.stringify(params[key]));\n    } catch (error) {\n      messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));\n    }\n  });\n  messageDetails.push('version=' + '#version');\n\n  const reason = message;\n  if (messageDetails.length) {\n    message += ' (' + messageDetails.join(', ') + ')';\n  }\n\n  // @TODO: Any??\n  const error: any = new Error(message);\n  error.reason = reason;\n  error.code = code;\n\n  Object.keys(params).forEach((key) => {\n    error[key] = params[key];\n  });\n\n  throw error;\n}\n\n/** @hidden */\nexport function checkNew(self: any, kind: any): void {\n  if (!(self instanceof kind)) {\n    throwError('missing new', MISSING_NEW, { name: kind.name });\n  }\n}\n\n/** @hidden */\nexport function checkArgumentCount(count: number, expectedCount: number, suffix?: string): void {\n  if (!suffix) {\n    suffix = '';\n  }\n  if (count < expectedCount) {\n    throwError('missing argument' + suffix, MISSING_ARGUMENT, {\n      count,\n      expectedCount,\n    });\n  }\n  if (count > expectedCount) {\n    throwError('too many arguments' + suffix, UNEXPECTED_ARGUMENT, {\n      count,\n      expectedCount,\n    });\n  }\n}\n\n/** @hidden */\nexport function setCensorship(censorship: boolean, permanent?: boolean): void {\n  if (_permanentCensorErrors) {\n    throwError('error censorship permanent', UNSUPPORTED_OPERATION, {\n      operation: 'setCensorship',\n    });\n  }\n\n  _censorErrors = !!censorship;\n  _permanentCensorErrors = !!permanent;\n}\n\n/** @hidden */\nexport function checkNormalize(): void {\n  try {\n    // Make sure all forms of normalization are supported\n    ['NFD', 'NFC', 'NFKD', 'NFKC'].forEach((form) => {\n      try {\n        'test'.normalize(form);\n      } catch (error) {\n        throw new Error('missing ' + form);\n      }\n    });\n\n    if (String.fromCharCode(0xe9).normalize('NFD') !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error('broken implementation');\n    }\n  } catch (error) {\n    throwError('platform missing String.prototype.normalize', UNSUPPORTED_OPERATION, {\n      operation: 'String.prototype.normalize',\n      form: error.message,\n    });\n  }\n}\n\n/** @hidden */\nconst LogLevels: { [name: string]: number } = {\n  debug: 1,\n  default: 2,\n  info: 2,\n  warn: 3,\n  error: 4,\n  off: 5,\n};\n/** @hidden */\nlet LogLevel = LogLevels.default;\n\n/** @hidden */\nexport function setLogLevel(logLevel: string): void {\n  const level = LogLevels[logLevel];\n  if (level == null) {\n    warn('invliad log level - ' + logLevel);\n    return;\n  }\n  LogLevel = level;\n}\n\n/** @hidden */\nfunction log(logLevel: string, args: [any?, ...any[]]): void {\n  if (LogLevel > LogLevels[logLevel]) {\n    return;\n  }\n  console.log.apply(console, args);\n}\n\n/** @hidden */\nexport function warn(...args: [any?, ...any[]]): void {\n  log('warn', args);\n}\n\n/** @hidden */\nexport function info(...args: [any?, ...any[]]): void {\n  log('info', args);\n}\n","/**\n * @packageDocumentation\n * @module avalanche-crypto\n * @hidden\n */\n\n// This file is ported from ether.js/src.ts/utils/bytes.ts\n// and done some fixes\n\nimport * as errors from './errors';\n\nexport type Arrayish = string | ArrayLike<number>;\n\nexport interface Hexable {\n  toHexString(): string;\n}\n\nexport interface Signature {\n  r: string;\n  s: string;\n\n  /* At least avax of the following MUST be specified; the other will be derived */\n  recoveryParam?: number;\n  v?: number;\n}\n\n///////////////////////////////\n\nexport function isHexable(value: any): value is Hexable {\n  return !!value.toHexString;\n}\n\nfunction addSlice(array: Uint8Array): Uint8Array {\n  if (typeof array === 'object' && typeof array.slice === 'function') {\n    return array;\n  }\n\n  // tslint:disable-next-line: only-arrow-functions\n  array.slice = function() {\n    const args = Array.prototype.slice.call(arguments);\n    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, [args[0], args[1]])));\n  };\n\n  return array;\n}\n\nexport function isArrayish(value: any): value is Arrayish {\n  if (\n    !value ||\n    // tslint:disable-next-line: radix\n    parseInt(String(value.length)) !== value.length ||\n    typeof value === 'string'\n  ) {\n    return false;\n  }\n\n  // tslint:disable-next-line: prefer-for-of\n  for (let i = 0; i < value.length; i++) {\n    const v = value[i];\n    // tslint:disable-next-line: radix\n    if (v < 0 || v >= 256 || parseInt(String(v)) !== v) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function arrayify(value: Arrayish | Hexable): Uint8Array | null {\n  if (value == null) {\n    errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value,\n    });\n  }\n\n  if (isHexable(value)) {\n    value = value.toHexString();\n  }\n\n  if (typeof value === 'string') {\n    const match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n\n    if (!match) {\n      errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value,\n      });\n    }\n\n    if (match !== null && match[1] !== '0x') {\n      errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value,\n      });\n    }\n\n    value = value.substring(2);\n    if (value.length % 2) {\n      value = '0' + value;\n    }\n\n    const result = [];\n    for (let i = 0; i < value.length; i += 2) {\n      result.push(parseInt(value.substr(i, 2), 16));\n    }\n\n    return addSlice(new Uint8Array(result));\n  }\n\n  if (isArrayish(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n\n  errors.throwError('invalid arrayify value', null, {\n    arg: 'value',\n    value,\n    type: typeof value,\n  });\n  return null;\n}\n\nexport function concat(objects: Arrayish[]): Uint8Array {\n  if (objects === null) {\n    throw new Error(`concat objects is null`);\n  }\n  const arrays = [];\n  let length = 0;\n  // tslint:disable-next-line: prefer-for-of\n  for (let i = 0; i < objects.length; i++) {\n    const object = arrayify(objects[i]);\n    if (object == null) {\n      throw new Error('arrayify failed');\n    }\n    arrays.push(object);\n    length += object.length;\n  }\n\n  const result = new Uint8Array(length);\n  let offset = 0;\n  // tslint:disable-next-line: prefer-for-of\n  for (let i = 0; i < arrays.length; i++) {\n    result.set(arrays[i], offset);\n    offset += arrays[i].length;\n  }\n\n  return addSlice(result);\n}\n\nexport function stripZeros(value: Arrayish): Uint8Array {\n  let result: Uint8Array | null = arrayify(value);\n\n  if (result === null) {\n    throw new Error('arrayify failed');\n  }\n\n  if (result.length === 0) {\n    return result;\n  }\n\n  // Find the first non-zero entry\n  let start = 0;\n  while (result[start] === 0) {\n    start++;\n  }\n\n  // If we started with zeros, strip them\n  if (start) {\n    result = result.slice(start);\n  }\n\n  return result;\n}\n\nexport function padZeros(value: Arrayish, length: number): Uint8Array {\n  const arrayifyValue = arrayify(value);\n  if (arrayifyValue === null) {\n    throw new Error('arrayify failed');\n  }\n  if (length < arrayifyValue.length) {\n    throw new Error('cannot pad');\n  }\n\n  const result = new Uint8Array(length);\n  result.set(arrayifyValue, length - arrayifyValue.length);\n  return addSlice(result);\n}\n\nexport function isHexString(value: any, length?: number): boolean {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n  return true;\n}\n\nconst HexCharacters: string = '0123456789abcdef';\n\nexport function hexlify(value: Arrayish | Hexable | number): string {\n  if (isHexable(value)) {\n    return value.toHexString();\n  }\n\n  if (typeof value === 'number') {\n    if (value < 0) {\n      errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value,\n      });\n    }\n\n    // @TODO: Roll this into the above error as a numeric fault (overflow); next version, not backward compatible\n    // We can about (value == MAX_INT) to as well, since that may indicate we underflowed already\n    if (value >= 9007199254740991) {\n      errors.throwError('out-of-range', errors.NUMERIC_FAULT, {\n        operartion: 'hexlify',\n        fault: 'out-of-safe-range',\n      });\n    }\n\n    let hex = '';\n    while (value) {\n      hex = HexCharacters[value & 0x0f] + hex;\n      value = Math.floor(value / 16);\n    }\n\n    if (hex.length) {\n      if (hex.length % 2) {\n        hex = '0' + hex;\n      }\n      return '0x' + hex;\n    }\n\n    return '0x00';\n  }\n\n  if (typeof value === 'string') {\n    const match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n\n    if (!match) {\n      errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value,\n      });\n    }\n\n    if (match !== null && match[1] !== '0x') {\n      errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value,\n      });\n    }\n\n    if (value.length % 2) {\n      value = '0x0' + value.substring(2);\n    }\n    return value;\n  }\n\n  if (isArrayish(value)) {\n    const result = [];\n    // tslint:disable-next-line: prefer-for-of\n    for (let i = 0; i < value.length; i++) {\n      const v = value[i];\n      result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);\n    }\n    return '0x' + result.join('');\n  }\n\n  errors.throwError('invalid hexlify value', null, {\n    arg: 'value',\n    value,\n  });\n  return 'never';\n}\n\nexport function hexDataLength(data: string) {\n  if (!isHexString(data) || data.length % 2 !== 0) {\n    return null;\n  }\n  return (data.length - 2) / 2;\n}\n\nexport function hexDataSlice(data: string, offset: number, endOffset?: number): string {\n  if (!isHexString(data)) {\n    errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value: data,\n    });\n  }\n  if (data.length % 2 !== 0) {\n    errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value: data,\n    });\n  }\n  offset = 2 + 2 * offset;\n\n  if (endOffset != null) {\n    return '0x' + data.substring(offset, 2 + 2 * endOffset);\n  }\n\n  return '0x' + data.substring(offset);\n}\n\nexport function hexStripZeros(value: string): string {\n  if (!isHexString(value)) {\n    errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value,\n    });\n  }\n  while (value.length > 3 && value.substring(0, 3) === '0x0') {\n    value = '0x' + value.substring(3);\n  }\n  return value;\n}\n\nexport function hexZeroPad(value: string, length: number): string {\n  if (!isHexString(value)) {\n    errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value,\n    });\n  }\n\n  while (value.length < 2 * length + 2) {\n    value = '0x0' + value.substring(2);\n  }\n  return value;\n}\n\nexport function bytesPadLeft(value: string, byteLength: number): string {\n  if (!isHexString(value)) {\n    errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value,\n    });\n  }\n\n  const striped = value.substring(2);\n  if (striped.length > byteLength * 2) {\n    throw new Error(`hex string length = ${striped.length} beyond byteLength=${byteLength}`);\n  }\n  const padLength = byteLength * 2 - striped.length;\n  const returnValue = '0x' + '0'.repeat(padLength) + striped;\n  return returnValue;\n}\nexport function bytesPadRight(value: string, byteLength: number): string {\n  if (!isHexString(value)) {\n    errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value,\n    });\n  }\n\n  const striped = value.substring(2);\n  if (striped.length > byteLength * 2) {\n    throw new Error(`hex string length = ${striped.length} beyond byteLength=${byteLength}`);\n  }\n  const padLength = byteLength * 2 - striped.length;\n  const returnValue = '0x' + striped + '0'.repeat(padLength);\n  return returnValue;\n}\n\nexport function isSignature(value: any): value is Signature {\n  return value && value.r != null && value.s != null;\n}\n\nexport function splitSignature(signature: Arrayish | Signature): Signature {\n  if (signature !== undefined) {\n    let v = 0;\n    let r = '0x';\n    let s = '0x';\n\n    if (isSignature(signature)) {\n      if (signature.v == null && signature.recoveryParam == null) {\n        errors.throwError(\n          'at least on of recoveryParam or v must be specified',\n          errors.INVALID_ARGUMENT,\n          { argument: 'signature', value: signature },\n        );\n      }\n      r = hexZeroPad(signature.r, 32);\n      s = hexZeroPad(signature.s, 32);\n\n      v = signature.v || 0;\n      if (typeof v === 'string') {\n        v = parseInt(v, 16);\n      }\n\n      let recoveryParam = signature.recoveryParam || 0;\n      if (recoveryParam == null && signature.v != null) {\n        recoveryParam = 1 - (v % 2);\n      }\n      v = 27 + recoveryParam;\n    } else {\n      const bytes: Uint8Array = arrayify(signature) || new Uint8Array();\n      if (bytes.length !== 65) {\n        throw new Error('invalid signature');\n      }\n      r = hexlify(bytes.slice(0, 32));\n      s = hexlify(bytes.slice(32, 64));\n\n      v = bytes[64];\n      if (v !== 27 && v !== 28) {\n        v = 27 + (v % 2);\n      }\n    }\n\n    return {\n      r,\n      s,\n      recoveryParam: v - 27,\n      v,\n    };\n  } else {\n    throw new Error('signature is not found');\n  }\n}\n\nexport function joinSignature(signature: Signature): string {\n  signature = splitSignature(signature);\n\n  return hexlify(concat([signature.r, signature.s, signature.recoveryParam ? '0x1c' : '0x1b']));\n}\n\n/**\n * hexToByteArray\n *\n * Convers a hex string to a Uint8Array\n *\n * @param {string} hex\n * @returns {Uint8Array}\n */\nexport const hexToByteArray = (hex: string): Uint8Array => {\n  const res = new Uint8Array(hex.length / 2);\n\n  for (let i = 0; i < hex.length; i += 2) {\n    res[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n  }\n\n  return res;\n};\n\n/**\n * hexToIntArray\n *\n * @param {string} hex\n * @returns {number[]}\n */\nexport const hexToIntArray = (hex: string): number[] => {\n  if (!hex || !isHex(hex)) {\n    return [];\n  }\n\n  const res = [];\n\n  for (let i = 0; i < hex.length; i++) {\n    const c = hex.charCodeAt(i);\n    const hi = c >> 8;\n    const lo = c & 0xff;\n\n    hi ? res.push(hi, lo) : res.push(lo);\n  }\n\n  return res;\n};\n\n/**\n * isHex\n *\n * @param {string} str - string to be tested\n * @returns {boolean}\n */\nexport const isHex = (str: string): boolean => {\n  const plain = str.replace('0x', '');\n  return /[0-9a-f]*$/i.test(plain);\n};\n","/**\n * @packageDocumentation\n * @module avalanche-crypto\n * @ignore\n */\n\n// this file is ported from 'ether.js' and done some fixes\nimport * as sha3 from 'js-sha3';\n\nimport { arrayify, Arrayish } from './bytes';\n\nexport function keccak256(data: Arrayish): string {\n  const arrayified = arrayify(data);\n  if (arrayified) {\n    return '0x' + sha3.keccak_256(arrayified);\n  }\n  throw new Error('arrayify failed');\n}\n\n// export function sha3_256(data: Arrayish): string {\n//   const arrayified = arrayify(data);\n//   if (arrayified) {\n//     return '0x' + sha3.sha3_256(arrayified);\n//   }\n//   throw new Error('arrayify failed');\n// }\n","/**\n * @packageDocumentation\n * @module avalanche-crypto\n * @hidden\n */\n\nimport { isAddress } from 'avalanche-js-utils';\n\nimport { toChecksumAddress } from './keyTool';\n// This code is taken from https://github.com/sipa/bech32/tree/bdc264f84014c234e908d72026b7b780122be11f/ref/javascript\n// Copyright (c) 2017 Pieter Wuille\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nconst CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\nconst GENERATOR = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n\nconst polymod = (values: Buffer): number => {\n  let chk = 1;\n  // tslint:disable-next-line\n  for (let p = 0; p < values.length; ++p) {\n    const top = chk >> 25;\n    chk = ((chk & 0x1ffffff) << 5) ^ values[p];\n    for (let i = 0; i < 5; ++i) {\n      if ((top >> i) & 1) {\n        chk ^= GENERATOR[i];\n      }\n    }\n  }\n  return chk;\n};\n\nconst hrpExpand = (hrp: string): Buffer => {\n  const ret = [];\n  let p;\n  for (p = 0; p < hrp.length; ++p) {\n    ret.push(hrp.charCodeAt(p) >> 5);\n  }\n  ret.push(0);\n  for (p = 0; p < hrp.length; ++p) {\n    ret.push(hrp.charCodeAt(p) & 31);\n  }\n  return Buffer.from(ret);\n};\n\nfunction verifyChecksum(hrp: string, data: Buffer) {\n  return polymod(Buffer.concat([hrpExpand(hrp), data])) === 1;\n}\n\nfunction createChecksum(hrp: string, data: Buffer) {\n  const values = Buffer.concat([\n    Buffer.from(hrpExpand(hrp)),\n    data,\n    Buffer.from([0, 0, 0, 0, 0, 0]),\n  ]);\n  // var values = hrpExpand(hrp).concat(data).concat([0, 0, 0, 0, 0, 0]);\n  const mod = polymod(values) ^ 1;\n  const ret = [];\n  for (let p = 0; p < 6; ++p) {\n    ret.push((mod >> (5 * (5 - p))) & 31);\n  }\n  return Buffer.from(ret);\n}\n\nexport const bech32Encode = (hrp: string, data: Buffer) => {\n  const combined = Buffer.concat([data, createChecksum(hrp, data)]);\n  let ret = hrp + '1';\n  // tslint:disable-next-line\n  for (let p = 0; p < combined.length; ++p) {\n    ret += CHARSET.charAt(combined[p]);\n  }\n  return ret;\n};\n\nexport const bech32Decode = (bechString: string) => {\n  let p;\n  let hasLower = false;\n  let hasUpper = false;\n  for (p = 0; p < bechString.length; ++p) {\n    if (bechString.charCodeAt(p) < 33 || bechString.charCodeAt(p) > 126) {\n      return null;\n    }\n    if (bechString.charCodeAt(p) >= 97 && bechString.charCodeAt(p) <= 122) {\n      hasLower = true;\n    }\n    if (bechString.charCodeAt(p) >= 65 && bechString.charCodeAt(p) <= 90) {\n      hasUpper = true;\n    }\n  }\n  if (hasLower && hasUpper) {\n    return null;\n  }\n  bechString = bechString.toLowerCase();\n  const pos = bechString.lastIndexOf('1');\n  if (pos < 1 || pos + 7 > bechString.length || bechString.length > 90) {\n    return null;\n  }\n  const hrp = bechString.substring(0, pos);\n  const data = [];\n  for (p = pos + 1; p < bechString.length; ++p) {\n    const d = CHARSET.indexOf(bechString.charAt(p));\n    if (d === -1) {\n      return null;\n    }\n    data.push(d);\n  }\n\n  if (!verifyChecksum(hrp, Buffer.from(data))) {\n    return null;\n  }\n\n  return { hrp, data: Buffer.from(data.slice(0, data.length - 6)) };\n};\n\n// HRP is the human-readable part of Avalanche bech32 addresses\nexport const HRP = 'avax';\nexport const tHRP = 'tavax';\n\n/**\n * convertBits\n *\n * groups buffers of a certain width to buffers of the desired width.\n *\n * For example, converts byte buffers to buffers of maximum 5 bit numbers,\n * padding those numbers as necessary. Necessary for encoding Ethereum-style\n * addresses as bech32 avaxs.\n *\n * @param {Buffer} data\n * @param {number} fromWidth\n * @param {number} toWidth\n * @param {boolean} pad\n * @returns {Buffer|null}\n */\nexport const convertBits = (\n  data: Buffer,\n  fromWidth: number,\n  toWidth: number,\n  pad: boolean = true,\n) => {\n  let acc = 0;\n  let bits = 0;\n  const ret = [];\n  const maxv = (1 << toWidth) - 1;\n  // tslint:disable-next-line\n  for (let p = 0; p < data.length; ++p) {\n    const value = data[p];\n    if (value < 0 || value >> fromWidth !== 0) {\n      return null;\n    }\n    acc = (acc << fromWidth) | value;\n    bits += fromWidth;\n    while (bits >= toWidth) {\n      bits -= toWidth;\n      ret.push((acc >> bits) & maxv);\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      ret.push((acc << (toWidth - bits)) & maxv);\n    }\n  } else if (bits >= fromWidth || (acc << (toWidth - bits)) & maxv) {\n    return null;\n  }\n\n  return Buffer.from(ret);\n};\n\n/**\n * toBech32Address\n *\n * bech32Encodes a canonical 20-byte Ethereum-style address as a bech32 Avalanche\n * address.\n *\n * The expected format is avax1<address><checksum> where address and checksum\n * are the result of bech32 encoding a Buffer containing the address bytes.\n *\n * @param {string} 20 byte canonical address\n * @returns {string} 38 char bech32 bech32Encoded Avalanche address\n */\nexport const toBech32 = (address: string, useHRP: string = HRP): string => {\n  if (!isAddress(address)) {\n    throw new Error('Invalid address format.');\n  }\n\n  const addrBz = convertBits(Buffer.from(address.replace('0x', ''), 'hex'), 8, 5);\n\n  if (addrBz === null) {\n    throw new Error('Could not convert byte Buffer to 5-bit Buffer');\n  }\n\n  return bech32Encode(useHRP, addrBz);\n};\n\n/**\n * fromBech32Address\n *\n * @param {string} address - a valid Avalanche bech32 address\n * @returns {string} a canonical 20-byte Ethereum-style address\n */\nexport const fromBech32 = (address: string, useHRP: string = HRP): string => {\n  const res = bech32Decode(address);\n\n  if (res === null) {\n    throw new Error('Invalid bech32 address');\n  }\n\n  const { hrp, data } = res;\n\n  if (hrp !== useHRP) {\n    throw new Error(`Expected hrp to be ${useHRP} but got ${hrp}`);\n  }\n\n  const buf = convertBits(data, 5, 8, false);\n\n  if (buf === null) {\n    throw new Error('Could not convert buffer to bytes');\n  }\n\n  return toChecksumAddress('0x' + buf.toString('hex'));\n};\n","/**\n * @packageDocumentation\n * @module avalanche-crypto\n * @hidden\n */\n\n// this file is ported from https://github.com/ethers-io/ethers.js/blob/master/src.ts/utils/rlp.ts\n// and done some fixes\nimport { arrayify, hexlify, Arrayish } from './bytes';\n\nfunction arrayifyInteger(value: number): number[] {\n  const result = [];\n  while (value) {\n    result.unshift(value & 0xff);\n    value >>= 8;\n  }\n  return result;\n}\n\nfunction unarrayifyInteger(data: Uint8Array, offset: number, length: number): number {\n  let result = 0;\n  for (let i = 0; i < length; i++) {\n    result = result * 256 + data[offset + i];\n  }\n  return result;\n}\n\nfunction _encode(object: any[] | string): number[] {\n  if (Array.isArray(object)) {\n    let payload: number[] = [];\n    object.forEach((child) => {\n      payload = payload.concat(_encode(child));\n    });\n\n    if (payload.length <= 55) {\n      payload.unshift(0xc0 + payload.length);\n      return payload;\n    }\n\n    // tslint:disable-next-line: no-shadowed-variable\n    const length = arrayifyInteger(payload.length);\n    length.unshift(0xf7 + length.length);\n\n    return length.concat(payload);\n  }\n\n  const data: number[] = Array.prototype.slice.call(arrayify(object));\n\n  if (data.length === 1 && data[0] <= 0x7f) {\n    return data;\n  } else if (data.length <= 55) {\n    data.unshift(0x80 + data.length);\n    return data;\n  }\n\n  const length = arrayifyInteger(data.length);\n  length.unshift(0xb7 + length.length);\n\n  return length.concat(data);\n}\n\nexport function encode(object: any): string {\n  return hexlify(_encode(object));\n}\n\ninterface Decoded {\n  result: any;\n  consumed: number;\n}\n\nfunction _decodeChildren(\n  data: Uint8Array,\n  offset: number,\n  childOffset: number,\n  length: number,\n): Decoded {\n  const result = [];\n\n  while (childOffset < offset + 1 + length) {\n    const decoded = _decode(data, childOffset);\n\n    result.push(decoded.result);\n\n    childOffset += decoded.consumed;\n    if (childOffset > offset + 1 + length) {\n      throw new Error('invalid rlp');\n    }\n  }\n\n  return { consumed: 1 + length, result };\n}\n\n// returns { consumed: number, result: Object }\nfunction _decode(data: Uint8Array, offset: number): { consumed: number; result: any } {\n  if (data.length === 0) {\n    throw new Error('invalid rlp data');\n  }\n\n  // Array with extra length prefix\n  if (data[offset] >= 0xf8) {\n    const lengthLength = data[offset] - 0xf7;\n    if (offset + 1 + lengthLength > data.length) {\n      throw new Error('too short');\n    }\n\n    const length = unarrayifyInteger(data, offset + 1, lengthLength);\n    if (offset + 1 + lengthLength + length > data.length) {\n      throw new Error('to short');\n    }\n\n    return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n  } else if (data[offset] >= 0xc0) {\n    const length = data[offset] - 0xc0;\n    if (offset + 1 + length > data.length) {\n      throw new Error('invalid rlp data');\n    }\n\n    return _decodeChildren(data, offset, offset + 1, length);\n  } else if (data[offset] >= 0xb8) {\n    const lengthLength = data[offset] - 0xb7;\n    if (offset + 1 + lengthLength > data.length) {\n      throw new Error('invalid rlp data');\n    }\n\n    const length = unarrayifyInteger(data, offset + 1, lengthLength);\n    if (offset + 1 + lengthLength + length > data.length) {\n      throw new Error('invalid rlp data');\n    }\n\n    const result = hexlify(\n      data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length),\n    );\n    return { consumed: 1 + lengthLength + length, result };\n  } else if (data[offset] >= 0x80) {\n    const length = data[offset] - 0x80;\n    if (offset + 1 + length > data.length) {\n      throw new Error('invlaid rlp data');\n    }\n\n    const result = hexlify(data.slice(offset + 1, offset + 1 + length));\n    return { consumed: 1 + length, result };\n  }\n  return { consumed: 1, result: hexlify(data[offset]) };\n}\n\nexport function decode(data: Arrayish): any {\n  const bytes = arrayify(data) || new Uint8Array();\n  const decoded = _decode(bytes, 0);\n  if (decoded.consumed !== bytes.length) {\n    throw new Error('invalid rlp data');\n  }\n  return decoded.result;\n}\n","/**\n * @packageDocumentation\n * @module avalanche-crypto\n */\n\nimport elliptic from 'elliptic';\nimport * as bytes from './bytes';\nimport * as errors from './errors';\n\nimport { keccak256 } from './keccak256';\nimport { randomBytes } from './random';\nimport { isPrivateKey, strip0x, isAddress, isBech32Address } from 'avalanche-js-utils';\nimport { fromBech32 } from './bech32';\nimport { encode } from './rlp';\n\nconst secp256k1 = elliptic.ec('secp256k1');\n\n/**\n * @function generatePrivateKey\n * @description generatePrivate key using `eth-lib` settings\n * @return {string}\n */\nexport const generatePrivateKey = (): string => {\n  const entropy: string = '0x' + randomBytes(16);\n\n  const innerHex: string = keccak256(\n    bytes.concat(['0x' + randomBytes(32), entropy || '0x' + randomBytes(32)]),\n  );\n  const middleHex: Uint8Array = bytes.concat([\n    bytes.concat(['0x' + randomBytes(32), innerHex]),\n    '0x' + randomBytes(32),\n  ]);\n  const outerHex: string = keccak256(middleHex);\n  return outerHex;\n};\n\n/**\n * @function getPubkeyFromPrivateKey\n * @param  {string} privateKey - private key String\n * @return {string}\n */\nexport const getPubkeyFromPrivateKey = (privateKey: string): string => {\n  return '0x' + getPublic(privateKey, true);\n};\n\n/**\n * @function getAddressFromPrivateKey\n * @param  {string} privateKey - private key string\n * @return {string} address with `length = 40`\n */\nexport const getAddressFromPrivateKey = (privateKey: string): string => {\n  const publicHash = '0x' + getPublic(privateKey).slice(2);\n  const publicKey = keccak256(publicHash);\n  const address = '0x' + publicKey.slice(-40);\n  return address;\n};\n\nexport const getPublic = (privateKey: string, compress?: boolean): string => {\n  if (!isPrivateKey(privateKey) || !validatePrivateKey(privateKey)) {\n    throw new Error(`${privateKey} is not PrivateKey`);\n  }\n  const ecKey = secp256k1.keyFromPrivate(strip0x(privateKey), 'hex');\n\n  return ecKey.getPublic(compress || false, 'hex');\n};\n\n/**\n * @function getAddressFromPublicKey\n * @param  {string} publicKey - public key string\n * @return {string} address with `length = 40`\n */\nexport const getAddressFromPublicKey = (publicKey: string): string => {\n  const ecKey = secp256k1.keyFromPublic(publicKey.slice(2), 'hex');\n  const publicHash = ecKey.getPublic(false, 'hex');\n  const address = '0x' + keccak256('0x' + publicHash.slice(2)).slice(-40);\n  return address;\n};\n\n/**\n * @function toChecksumAddress\n * @param  {string} address - raw address\n * @return {string} checksumed address\n */\nexport const toChecksumAddress = (address: string): string => {\n  if (typeof address === 'string' && isBech32Address(address)) {\n    address = fromBech32(address);\n  }\n  if (typeof address !== 'string' || !address.match(/^0x[0-9A-Fa-f]{40}$/)) {\n    errors.throwError('invalid address', errors.INVALID_ARGUMENT, {\n      arg: 'address',\n      value: address,\n    });\n  }\n\n  address = address.toLowerCase();\n\n  const chars = address.substring(2).split('');\n\n  let hashed = new Uint8Array(40);\n  for (let i = 0; i < 40; i++) {\n    hashed[i] = chars[i].charCodeAt(0);\n  }\n  hashed = bytes.arrayify(keccak256(hashed)) || hashed;\n\n  for (let i = 0; i < 40; i += 2) {\n    if (hashed[i >> 1] >> 4 >= 8) {\n      chars[i] = chars[i].toUpperCase();\n    }\n    if ((hashed[i >> 1] & 0x0f) >= 8) {\n      chars[i + 1] = chars[i + 1].toUpperCase();\n    }\n  }\n\n  return '0x' + chars.join('');\n};\n\nexport const sign = (digest: bytes.Arrayish | string, privateKey: string): bytes.Signature => {\n  if (!isPrivateKey(privateKey)) {\n    throw new Error(`${privateKey} is not PrivateKey`);\n  }\n\n  const keyPair = secp256k1.keyFromPrivate(strip0x(privateKey), 'hex');\n  const signature = keyPair.sign(bytes.arrayify(digest), { canonical: true });\n  const publicKey = '0x' + keyPair.getPublic(true, 'hex');\n  const result = {\n    recoveryParam: signature.recoveryParam,\n    r: bytes.hexZeroPad('0x' + signature.r.toString(16), 32),\n    s: bytes.hexZeroPad('0x' + signature.s.toString(16), 32),\n    v: 27 + signature.recoveryParam,\n  };\n\n  if (verifySignature(digest, result, publicKey)) {\n    return result;\n  } else {\n    throw new Error('signing process failed');\n  }\n};\n\nexport function getContractAddress(from: string, nonce: number): string {\n  if (!from) {\n    throw new Error('missing from address');\n  }\n\n  const addr = keccak256(encode([from, bytes.stripZeros(bytes.hexlify(nonce))]));\n  return '0x' + addr.substring(26);\n}\n\nexport function verifySignature(\n  digest: bytes.Arrayish,\n  signature: bytes.Signature,\n  publicKey: string,\n): boolean {\n  return recoverPublicKey(digest, signature) === publicKey;\n}\n\nexport function recoverPublicKey(\n  digest: bytes.Arrayish | string,\n  signature: bytes.Signature | string,\n): string {\n  const sig = bytes.splitSignature(signature);\n  const rs = { r: bytes.arrayify(sig.r), s: bytes.arrayify(sig.s) };\n\n  ////\n  const recovered = secp256k1.recoverPubKey(bytes.arrayify(digest), rs, sig.recoveryParam);\n\n  const key = recovered.encode('hex', false);\n  const ecKey = secp256k1.keyFromPublic(key, 'hex');\n  const publicKey = '0x' + ecKey.getPublic(true, 'hex');\n\n  ///\n\n  return publicKey;\n}\n\nexport function recoverAddress(\n  digest: bytes.Arrayish | string,\n  signature: bytes.Signature | string,\n): string {\n  return getAddressFromPublicKey(\n    recoverPublicKey(bytes.arrayify(digest) || new Uint8Array(), signature),\n  );\n}\n\n/**\n * isValidChecksumAddress\n *\n * takes hex-encoded string and returns boolean if address is checksumed\n *\n * @param {string} address\n * @returns {boolean}\n */\nexport const isValidChecksumAddress = (address: string): boolean => {\n  return isAddress(address.replace('0x', '')) && toChecksumAddress(address) === address;\n};\n\nexport const validatePrivateKey = (privateKey: string): boolean => {\n  const ecKey = secp256k1.keyFromPrivate(strip0x(privateKey), 'hex');\n  const { result } = ecKey.validate();\n  return result;\n};\n","/**\n * @packageDocumentation\n * @module avalanche-crypto\n */\n\nimport aes from 'aes-js';\n// import scrypt from 'scrypt.js';\nimport scrypt from 'scrypt-shim';\nimport { pbkdf2Sync } from 'pbkdf2';\nimport uuid from 'uuid';\nimport { isPrivateKey } from 'avalanche-js-utils';\nimport { randomBytes } from './random';\nimport { getAddressFromPrivateKey } from './keyTool';\nimport { concat, hexToIntArray } from './bytes';\nimport { keccak256 } from './keccak256';\nimport { KDF, KDFParams, EncryptOptions, PBKDF2Params, ScryptParams, Keystore } from './types';\n\n/** @hidden */\nconst DEFAULT_ALGORITHM = 'aes-128-ctr';\n\n/**\n * getDerivedKey\n *\n * NOTE: only scrypt and pbkdf2 are supported.\n *\n * @param {Buffer} key - the passphrase\n * @param {KDF} kdf - the key derivation function to be used\n * @param {KDFParams} params - params for the kdf\n *\n * @returns {Promise<Buffer>}\n */\nasync function getDerivedKey(key: Buffer, kdf: KDF, params: KDFParams): Promise<Buffer> {\n  const salt = Buffer.from(params.salt, 'hex');\n\n  if (kdf === 'pbkdf2') {\n    const { c, dklen } = params as PBKDF2Params;\n    return pbkdf2Sync(key, salt, c, dklen, 'sha256');\n  }\n\n  if (kdf === 'scrypt') {\n    const { n, r, p, dklen } = params as ScryptParams;\n    return scrypt(key, salt, n, r, p, dklen);\n  }\n\n  throw new Error('Only pbkdf2 and scrypt are supported');\n}\n\n/**\n * This method will map the current Account object to V3Keystore object.\n *\n * @method encrypt\n *\n * @param {string} privateKey\n * @param {string} password\n * @param {object} options\n *\n * @return {{version, id, address, crypto}}\n */\nexport const encrypt = async (\n  privateKey: string,\n  password: string,\n  options?: EncryptOptions,\n): Promise<string> => {\n  if (!isPrivateKey(privateKey)) {\n    throw new Error('privateKey is not correct');\n  }\n  if (typeof password !== 'string') {\n    throw new Error('password is not found');\n  }\n  const address = getAddressFromPrivateKey(privateKey);\n\n  const salt = randomBytes(32);\n  const iv = Buffer.from(randomBytes(16), 'hex');\n  const kdf = options !== undefined ? (options.kdf ? options.kdf : 'scrypt') : 'scrypt';\n  const level = options !== undefined ? (options.level ? options.level : 8192) : 8192;\n\n  const uuidRandom = options !== undefined ? options.uuid : undefined;\n\n  const n = kdf === 'pbkdf2' ? 262144 : level;\n  const kdfparams = {\n    salt,\n    n,\n    r: 8,\n    p: 1,\n    dklen: 32,\n  };\n\n  const derivedKey = await getDerivedKey(Buffer.from(password), kdf, kdfparams);\n  const cipher = new aes.ModeOfOperation.ctr(derivedKey.slice(0, 16), new aes.Counter(iv));\n\n  if (!cipher) {\n    throw new Error('Unsupported cipher');\n  }\n\n  const ciphertext = Buffer.from(cipher.encrypt(Buffer.from(privateKey.replace('0x', ''), 'hex')));\n\n  const mac = keccak256(concat([derivedKey.slice(16, 32), ciphertext]));\n\n  return JSON.stringify({\n    version: 3,\n    id: uuid.v4({ random: uuidRandom || hexToIntArray(randomBytes(16)) }),\n    address: address.toLowerCase().replace('0x', ''),\n    crypto: {\n      ciphertext: ciphertext.toString('hex'),\n      cipherparams: {\n        iv: iv.toString('hex'),\n      },\n      cipher: DEFAULT_ALGORITHM,\n      kdf,\n      kdfparams,\n      mac: mac.replace('0x', ''),\n    },\n  });\n};\n\n/**\n * @function decrypt\n * @param  {Keystore} keystore - Keystore file\n * @param  {string} password - password string\n * @return {string} privateKey\n */\nexport const decrypt = async (keystore: Keystore, password: string): Promise<string> => {\n  const ciphertext = Buffer.from(keystore.crypto.ciphertext, 'hex');\n  const iv = Buffer.from(keystore.crypto.cipherparams.iv, 'hex');\n  const { kdfparams } = keystore.crypto;\n\n  const derivedKey = await getDerivedKey(Buffer.from(password), keystore.crypto.kdf, kdfparams);\n\n  const mac = keccak256(concat([derivedKey.slice(16, 32), ciphertext])).replace('0x', '');\n\n  if (mac.toUpperCase() !== keystore.crypto.mac.toUpperCase()) {\n    return Promise.reject(new Error('Failed to decrypt.'));\n  }\n\n  const CTR = aes.ModeOfOperation.ctr;\n\n  const cipher = new CTR(derivedKey.slice(0, 16), new aes.Counter(iv));\n\n  const decrypted = '0x' + Buffer.from(cipher.decrypt(ciphertext)).toString('hex');\n  return decrypted;\n};\n\n/**\n * encrypt Phrase\n */\nexport const encryptPhrase = async (\n  phrase: string,\n  password: string,\n  options?: EncryptOptions,\n): Promise<string> => {\n  if (typeof password !== 'string') {\n    throw new Error('password is not found');\n  }\n  const salt = randomBytes(32);\n  const iv = Buffer.from(randomBytes(16), 'hex');\n  const kdf = options !== undefined ? (options.kdf ? options.kdf : 'scrypt') : 'scrypt';\n  const level = options !== undefined ? (options.level ? options.level : 8192) : 8192;\n\n  const uuidRandom = options !== undefined ? options.uuid : undefined;\n\n  const n = kdf === 'pbkdf2' ? 262144 : level;\n  const kdfparams = {\n    salt,\n    n,\n    r: 8,\n    p: 1,\n    dklen: 32,\n  };\n  const derivedKey = await getDerivedKey(Buffer.from(password), kdf, kdfparams);\n  const cipher = new aes.ModeOfOperation.ctr(derivedKey.slice(0, 16), new aes.Counter(iv));\n\n  if (!cipher) {\n    throw new Error('Unsupported cipher');\n  }\n\n  const ciphertext = Buffer.from(cipher.encrypt(Buffer.from(phrase)));\n\n  const mac = keccak256(concat([derivedKey.slice(16, 32), ciphertext]));\n  return JSON.stringify({\n    version: 3,\n    id: uuid.v4({ random: uuidRandom || hexToIntArray(randomBytes(16)) }),\n    crypto: {\n      ciphertext: ciphertext.toString('hex'),\n      cipherparams: {\n        iv: iv.toString('hex'),\n      },\n      cipher: DEFAULT_ALGORITHM,\n      kdf,\n      kdfparams,\n      mac: mac.replace('0x', ''),\n    },\n  });\n};\n\n/**\n * decrypt phrase\n */\nexport const decryptPhrase = async (keystore: Keystore, password: string): Promise<string> => {\n  const result = await decrypt(keystore, password);\n  return Buffer.from(result.replace('0x', ''), 'hex').toString();\n};\n","/**\n * @packageDocumentation\n * @module avalanche-crypto\n */\n\nimport { isAddress, isBech32Address, isBech32TestNetAddress } from 'avalanche-js-utils';\n\nimport { toChecksumAddress } from './keyTool';\nimport { fromBech32, toBech32, HRP, tHRP } from './bech32';\n\n/**\n * ### How to use it?\n *\n * ```\n * // Step 1: import the class\n * const { AvalancheAddress } = require('avalanche-js-crypto');\n *\n * // Step 2: call functions\n * const addr = 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n * const res = AvalancheAddress.isValidBech32(addr);\n * console.log(res);\n * ```\n */\nexport class AvalancheAddress {\n  /**\n   * @example\n   * ```\n   * const addr = 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = AvalancheAddress.isValidBech32(addr);\n   * console.log(res);\n   * ```\n   */\n  static isValidBasic(str: string) {\n    const toTest = new AvalancheAddress(str);\n    return toTest.raw === toTest.basic;\n  }\n\n  /**\n   * @example\n   * ```\n   * const addr = 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = AvalancheAddress.isValidChecksum(addr);\n   * console.log(res);\n   * ```\n   */\n  static isValidChecksum(str: string) {\n    const toTest = new AvalancheAddress(str);\n    return toTest.raw === toTest.checksum;\n  }\n\n  /**\n   * @example\n   * ```\n   * const addr = 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = AvalancheAddress.isValidBech32(addr);\n   * console.log(res);\n   * ```\n   */\n  static isValidBech32(str: string) {\n    const toTest = new AvalancheAddress(str);\n    return toTest.raw === toTest.bech32;\n  }\n\n  /**\n   * @example\n   * ```\n   * const addr = 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const res = AvalancheAddress.isValidBech32TestNet(addr);\n   * console.log(res);\n   * ```\n   */\n  static isValidBech32TestNet(str: string) {\n    const toTest = new AvalancheAddress(str);\n    return toTest.raw === toTest.bech32TestNet;\n  }\n\n  raw: string;\n  basic: string;\n\n  /**\n   * get basicHex of the address\n   *\n   * @example\n   * ```\n   * const addr = 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const instance = new AvalancheAddress(addr);\n   * console.log(instance.basicHex);\n   * ```\n   */\n  get basicHex() {\n    return `0x${this.basic}`;\n  }\n\n  /**\n   * @example\n   * ```\n   * const addr = 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const instance = new AvalancheAddress(addr);\n   * console.log(instance.checksum);\n   * ```\n   */\n  get checksum() {\n    return toChecksumAddress(`0x${this.basic}`);\n  }\n\n  /**\n   * @example\n   * ```\n   * const addr = 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const instance = new AvalancheAddress(addr);\n   * console.log(instance.bech32);\n   * ```\n   */\n  get bech32() {\n    return toBech32(this.basic, HRP);\n  }\n\n  /**\n   * @example\n   * ```\n   * const addr = 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const instance = new AvalancheAddress(addr);\n   * console.log(instance.bech32TestNet);\n   * ```\n   */\n  get bech32TestNet() {\n    return toBech32(this.basic, tHRP);\n  }\n\n  constructor(raw: string) {\n    this.raw = raw;\n    this.basic = this.getBasic(this.raw);\n  }\n\n  /**\n   * Check whether the address has an valid address format\n   *\n   * @param addr string, the address\n   *\n   * @example\n   * ```\n   * const addr = 'avax103q7qe5t2505lypvltkqtddaef5tzfxwsse4z7'\n   * const instance = new AvalancheAddress(addr);\n   * const res = instance.getBasic(addr);\n   * console.log(res)\n   * ```\n   */\n  private getBasic(addr: string) {\n    const basicBool = isAddress(addr);\n    const bech32Bool = isBech32Address(addr);\n    const bech32TestNetBool = isBech32TestNetAddress(addr);\n\n    if (basicBool) {\n      return addr.replace('0x', '').toLowerCase();\n    }\n\n    if (bech32Bool) {\n      const fromB32 = fromBech32(addr, HRP);\n      return fromB32.replace('0x', '').toLowerCase();\n    }\n\n    if (bech32TestNetBool) {\n      const fromB32TestNet = fromBech32(addr, tHRP);\n      return fromB32TestNet.replace('0x', '').toLowerCase();\n    }\n\n    throw new Error(`\"${addr}\" is an invalid address format`);\n  }\n}\n\n/**\n * Using this function to get Avalanche format address\n *\n * @param address\n *\n * @example\n * ```javascript\n * const { Avalanche } = require('avalanche-js-core');\n * const { ChainID, ChainType } = require('avalanche-js-utils');\n * const { randomBytes } = require('avalanche-js-crypto')\n *\n * const hmy = new Avalanche(\n *   'http://localhost:9500',\n *   {\n *   chainType: ChainType.Avalanche,\n *   chainId: ChainID.HmyLocal,\n *   },\n * );\n *\n * const bytes = randomBytes(20);\n * const hAddress = hmy.crypto.getAddress(bytes);\n * console.log(hAddress)\n * ```\n */\nexport function getAddress(address: string) {\n  try {\n    return new AvalancheAddress(address);\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":["randomBytes","bytes","randBz","window","crypto","getRandomValues","Uint8Array","require","Error","randStr","i","toString","slice","UNKNOWN_ERROR","NOT_IMPLEMENTED","MISSING_NEW","CALL_EXCEPTION","INVALID_ARGUMENT","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","NUMERIC_FAULT","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNSUPPORTED_OPERATION","_permanentCensorErrors","_censorErrors","throwError","message","code","params","messageDetails","Object","keys","forEach","key","push","JSON","stringify","error","reason","length","join","checkNew","self","kind","name","checkArgumentCount","count","expectedCount","suffix","setCensorship","censorship","permanent","operation","checkNormalize","form","normalize","String","fromCharCode","LogLevels","debug","info","warn","off","LogLevel","setLogLevel","logLevel","level","log","args","console","apply","isHexable","value","toHexString","addSlice","array","Array","prototype","call","arguments","isArrayish","parseInt","v","arrayify","errors","arg","match","substring","result","substr","type","concat","objects","arrays","object","offset","set","stripZeros","start","padZeros","arrayifyValue","isHexString","HexCharacters","hexlify","operartion","fault","hex","Math","floor","hexDataLength","data","hexDataSlice","endOffset","hexStripZeros","hexZeroPad","bytesPadLeft","byteLength","striped","padLength","returnValue","repeat","bytesPadRight","isSignature","r","s","splitSignature","signature","undefined","recoveryParam","argument","joinSignature","hexToByteArray","res","hexToIntArray","isHex","c","charCodeAt","hi","lo","str","plain","replace","test","keccak256","arrayified","sha3","CHARSET","GENERATOR","polymod","values","chk","p","top","hrpExpand","hrp","ret","Buffer","from","verifyChecksum","createChecksum","mod","bech32Encode","combined","charAt","bech32Decode","bechString","hasLower","hasUpper","toLowerCase","pos","lastIndexOf","d","indexOf","HRP","tHRP","convertBits","fromWidth","toWidth","pad","acc","bits","maxv","toBech32","address","useHRP","isAddress","addrBz","fromBech32","buf","toChecksumAddress","arrayifyInteger","unshift","unarrayifyInteger","_encode","isArray","payload","child","encode","_decodeChildren","childOffset","decoded","_decode","consumed","lengthLength","decode","secp256k1","elliptic","ec","generatePrivateKey","entropy","innerHex","middleHex","outerHex","getPubkeyFromPrivateKey","privateKey","getPublic","getAddressFromPrivateKey","publicHash","publicKey","compress","isPrivateKey","validatePrivateKey","ecKey","keyFromPrivate","strip0x","getAddressFromPublicKey","keyFromPublic","isBech32Address","chars","split","hashed","toUpperCase","sign","digest","keyPair","canonical","verifySignature","getContractAddress","nonce","addr","recoverPublicKey","sig","rs","recovered","recoverPubKey","recoverAddress","isValidChecksumAddress","validate","DEFAULT_ALGORITHM","getDerivedKey","kdf","salt","dklen","pbkdf2Sync","n","scrypt","encrypt","password","options","iv","uuidRandom","uuid","kdfparams","derivedKey","cipher","aes","ModeOfOperation","ctr","Counter","ciphertext","mac","version","id","v4","random","cipherparams","decrypt","keystore","Promise","reject","CTR","decrypted","encryptPhrase","phrase","decryptPhrase","AvalancheAddress","raw","basic","getBasic","isValidBasic","toTest","isValidChecksum","checksum","isValidBech32","bech32","isValidBech32TestNet","bech32TestNet","basicBool","bech32Bool","bech32TestNetBool","isBech32TestNetAddress","fromB32","fromB32TestNet","getAddress"],"mappings":"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"}